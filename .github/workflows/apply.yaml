name: Apply

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  apply:
    runs-on: ubuntu-latest
    env:
      GOOGLE_CREDENTIALS: ${{ secrets.CREDENTIALS }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Auth GCloud
        uses: "google-github-actions/auth@v2.1.2"
        with:
          credentials_json: ${{ secrets.CREDENTIALS }}
          export_environment_variables: true
          create_credentials_file: true

      - name: Set up Cloud SDK
        uses: "google-github-actions/setup-gcloud@v2"

      - name: Use gcloud CLI
        run: gcloud container clusters list

      - name: Setup Cluster Kubernetes
        uses: "google-github-actions/get-gke-credentials@v2"
        with:
          cluster_name: ${{ vars.CLUSTER_NAME }}
          location: ${{ vars.ZONE }}

      - name: Setup Namespace
        working-directory: k8s/
        run: |
            kubectl apply -f namespace.yaml
            kubectl config set-context --current --namespace=med-connect

      - name: apply rabbitmq
        working-directory: k8s/
        run: kubectl apply -f rabbitmq/
      
      - name: apply API Gateway
        working-directory: k8s/kong/
        run: |
          echo "$(cat configmap.yaml)" | envsubst | kubectl apply -f -
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
        env:
          TOKEN_SECRET: ${{ secrets.TOKEN_SECRET }}

      - name: apply reverse-proxy
        working-directory: k8s/
        run: kubectl apply -f nginx/

      - name: apply configmap
        working-directory: k8s/api/
        run: |
          echo "$(cat api-configmap.yaml)" | envsubst | kubectl apply -f -
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_IP: ${{ vars.DB_IP }}
          DB_USERNAME: ${{ vars.DB_USERNAME }}
          DB_NAME: ${{ vars.DB_NAME }}
          TOKEN_SECRET: ${{ secrets.TOKEN_SECRET }}

      - name: apply med-connect api
        run: |
          kubectl apply -f k8s/api/api-deployment.yaml 
          kubectl apply -f k8s/api/api-hpa.yaml
          kubectl apply -f k8s/api/api-service.yaml

      - name: get services
        run: kubectl get svc -o wide